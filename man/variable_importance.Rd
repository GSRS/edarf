% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/imp.R
\name{variable_importance}
\alias{variable_importance}
\alias{variable_importance.RandomForest}
\alias{variable_importance.randomForest}
\alias{variable_importance.rfsrc}
\title{Variable importance using random forests}
\usage{
variable_importance(fit, ...)

\method{variable_importance}{randomForest}(fit, type = "accuracy",
  class_levels = FALSE, ...)

\method{variable_importance}{RandomForest}(fit, conditional = FALSE,
  auc = FALSE, ...)

\method{variable_importance}{rfsrc}(fit, type = "permute",
  class_levels = FALSE, ...)
}
\arguments{
\item{fit}{object of class 'RandomForest', 'randomForest', or 'rfsrc'}

\item{...}{arguments to be passed to \code{variable_importance}}

\item{type}{character equal to "accuracy", "gini", or "local"
if type is "accuracy" importance must be set to TRUE in the call to randomForest}

\item{class_levels}{logical, when TRUE class level specific importances are returned
response variable must be a factor and importance = TRUE in the call to randomForest}

\item{conditional}{logical, if true the conditional permutation importance is estimated, if not the marginal}

\item{auc}{logical, whether to use varimpAUC instead of varimp}

\item{fit}{an object of class 'randomForest' returned from \code{randomForest}}

\item{...}{further arguments to be passed to nothing}

\item{fit}{an object of class 'randomForest' returned from \code{randomForest}}

\item{...}{further arguments to be passed to varimp or varimpAUC}

\item{fit}{an object of class 'rfsrc' returned from \code{rfsrc}}

\item{type}{character equal to "permute", "random", "permute.ensemble", or "random.ensemble"
this the \code{permute} argument must equal this value in the call to rfsrc}

\item{class_levels}{logical, when TRUE class level specific importances are returned otherwise the overal importance is returned}

\item{...}{further arguments to be passed to nothing}
}
\value{
a data.frame of class "importance"

a data.frame of class "importance"

a data.frame of class "importance"
}
\description{
Extracts variable importance for a set of predictors from a fitted random forest object from the party, randomForest, or randomForestSRC package

Extracts variable importances from a fitted \code{randomForest}

Extracts variable importances from a fitted \code{cforest}

Extracts variable importances from a fitted \code{rfsrc}
}
\examples{
\dontrun{
library(randomForest)
data(iris)

fit <- randomForest(Species ~ ., iris, importance = TRUE)
imp <- variable_importance(fit, "accuracy", TRUE)
plot_imp(imp)
}
\dontrun{
library(party)
data(iris)

fit <- cforest(Species ~ ., iris, controls = cforest_control(mtry = 2))
imp <- variable_importance(fit)
plot_imp(imp)
}
\dontrun{
library(randomForestSRC)
data(iris)

fit <- rfsrc(Species ~ ., iris, importance = "random")
variable_importance(fit, "random", TRUE)
}
}

