% Generated by roxygen2 (4.0.1): do not edit by hand
\name{partial_dependence}
\alias{partial_dependence}
\title{Partial dependence using random forests}
\usage{
partial_dependence(fit, df, var, cores = 1, cutoff = 10)
}
\arguments{
\item{fit}{an object of class 'RandomForest-class' returned from \code{cforest}, an object
of class 'randomForest' returned from \code{randomForest}, or an object of class 'rfsrc'
returned from \code{rfsrc}}

\item{df}{the dataframe used to fit the model, if the model is a party object of class 'RandomForest'
this option can be omitted and the dataframe will be extracted from the object}

\item{var}{a character vector of the predictors of interest, which must match the input
matrix in the call to \code{cforest}, \code{randomForest}, or \code{randomForestSRC}}

\item{cores}{indicates the number of cores to use. parallelization occurs in the prediction
on the grid of possible values taken by all combinations of `var`}

\item{cutoff}{the maximal number of unique points in each element of 'var' used in the
partial dependence calculation}
}
\value{
a dataframe with columns for each predictor in `var` and the fitted value for
each set of values taken by the values of 'var' averaged within the values of predictors
in the model but not in `var`
}
\description{
Calculates the partial dependence of the response on an arbitrary dimensional set of predictors
from a fitted random forest object from the Party, randomForest, or randomForestSRC packages
}
\examples{
library(randomForest)
library(party)
library(randomForestSRC)
CORES <- detectCores()

## Classification

data(iris)

fit_rf <- randomForest(Species ~ ., iris)
fit_pt <- cforest(Species ~ ., iris, controls = cforest_control(mtry = 2))
fit_rfsrc <- rfsrc(Species ~ ., iris)

pd_rf <- partial_dependence(fit_rf, iris, "Petal.Width", CORES)
pd_pt <- partial_dependence(fit_pt, iris, "Petal.Width", CORES)
pd_rfsrc <- partial_dependence(fit_rfsrc, iris, "Petal.Width", CORES)

pd_int_rf <- partial_dependence(fit_rf, iris, c("Petal.Width", "Sepal.Length"), CORES)
pd_int_pt <- partial_dependence(fit_pt, iris, c("Petal.Width", "Sepal.Length"), CORES)
pd_int_rfsrc <- partial_dependence(fit_rfsrc, iris, c("Petal.Width", "Sepal.Length"), CORES)

## Regression

data(swiss)

fit_rf <- randomForest(Fertility ~ ., swiss)
fit_pt <- cforest(Fertility ~ ., swiss, controls = cforest_control(mtry = 2))
fit_rfsrc <- rfsrc(Fertility ~ ., swiss)

pd_rf <- partial_dependence(fit_rf, swiss, "Education", CORES)
pd_pt <- partial_dependence(fit_pt, swiss, "Education", CORES)
pd_rfsrc <- partial_dependence(fit_rfsrc, swiss, "Education", CORES)

pd_int_rf <- partial_dependence(fit_rf, swiss, c("Education", "Catholic"), CORES)
pd_int_pt <- partial_dependence(fit_pt, swiss, c("Education", "Catholic"), CORES)
pd_int_rfsrc <- partial_dependence(fit_rfsrc, swiss, c("Education", "Catholic"), CORES)


## Survival

data(veteran, package = "randomForestSRC")

fit_rfsrc <- rfsrc(Surv(time, status) ~ ., veteran)

pd_rfsrc <- partial_dependence(fit_rfsrc, veteran, "age", CORES)

pd_int_rfsrc <- partial_dependence(fit_rfsrc, veteran, c("age", "diagtime"), CORES)
}

